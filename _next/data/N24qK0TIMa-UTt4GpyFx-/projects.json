{"pageProps":{"projects":[{"name":"nextjs-netlify-blog-template","description":null,"url":"https://github.com/ahaasler/nextjs-netlify-blog-template","readme":null,"languages":["TypeScript","CSS","HTML","JavaScript"]},{"name":"barebones-starter","description":null,"url":"https://github.com/ahaasler/barebones-starter","readme":"This is a [Tina CMS](https://tina.io/) project.\n\n## Local Development\n\nInstall the project's dependencies:\n\n```\nyarn install\n```\n\nRun the project locally:\n\n```\nyarn dev\n```\n\nOpen [http://localhost:3000](http://localhost:3000) with your browser to see the result.\n\n### Building the Starter Locally (Using the hosted content API)\n\nReplace the `.env.example`, with `.env`\n\n```\nNEXT_PUBLIC_TINA_CLIENT_ID=<get this from the project you create at app.tina.io>\nTINA_TOKEN=<get this from the project you create at app.tina.io>\nNEXT_PUBLIC_TINA_BRANCH=<Specify the branch with Tina configured>\n```\n\nBuild the project:\n\n```bash\nyarn build\n```\n\n## Learn More\n\nTo learn more about Tina, take a look at the following resources:\n\n- [Tina Docs](https://tina.io/docs)\n- [Getting starter guide](https://tina.io/guides/tina-cloud/starter/overview/)\n\nYou can check out [Tina Github repository](https://github.com/tinacms/tinacms) - your feedback and contributions are welcome!\n\n## [Deploy on Vercel](https://tina.io/guides/tina-cloud/add-tinacms-to-existing-site/deployment/)\n","languages":["JavaScript","Shell"]},{"name":"tina-cloud-starter","description":null,"url":"https://github.com/ahaasler/tina-cloud-starter","readme":"# Tina Starter ðŸ¦™\n\n![tina-cloud-starter-demo](https://user-images.githubusercontent.com/103008/130587027-995ccc45-a852-4f90-b658-13e8e0517339.gif)\n\nThis Next.js starter is powered by [TinaCMS](https://app.tina.io) for you and your team to visually live edit the structured content of your website. âœ¨\n\nThe content is managed through Markdown and JSON files stored in your GitHub repository, and queried through Tina GraphQL API.\n\n### Features\n\n- [Tina Headless CMS](https://app.tina.io) for authentication, content modeling, visual editing and team management.\n- [Vercel](https://vercel.com) deployment to visually edit your site from the `/admin` route.\n- Local development workflow from the filesystem with a local GraqhQL server.\n\n## Requirements\n\n- Git, [Node.js Active LTS](https://nodejs.org/en/about/releases/), Yarn installed for local development.\n- A [TinaCMS](https://app.tina.io) account for live editing.\n\n## Local Development\n\nInstall the project's dependencies:\n\n```\nyarn install\n```\n\nRun the project locally:\n\n```\nyarn dev\n```\n\n### Local URLs\n\n- http://localhost:3000 : browse the website\n- http://localhost:3000/admin : connect to Tina Cloud and go in edit mode\n- http://localhost:3000/exit-admin : log out of Tina Cloud\n- http://localhost:4001/altair/ : GraphQL playground to test queries and browse the API documentation\n\n### Building the Starter Locally (Using the hosted content API)\n\nReplace the `.env.example`, with `.env`\n\n```\nNEXT_PUBLIC_TINA_CLIENT_ID=<get this from the project you create at app.tina.io>\nTINA_TOKEN=<get this from the project you create at app.tina.io>\nNEXT_PUBLIC_TINA_BRANCH=<Specify the branch with Tina configured>\n```\n\nBuild the project:\n\n```bash\nyarn build\n```\n\n## Getting Help\n\nTo get help with any TinaCMS challenges you may have:\n\n- Visit the [documentation](https://tina.io/docs/) to learn about Tina.\n- [Join our Discord](https://discord.gg/zumN63Ybpf) to share feedback.\n- Visit the [community forum](https://community.tinacms.org/) to ask questions.\n- Get support through the chat widget on the TinaCMS Dashboard\n- [Email us](mailto:support@tina.io) to schedule a call with our team and share more about your context and what you're trying to achieve.\n- [Search or open an issue](https://github.com/tinacms/tinacms/issues) if something is not working.\n- Reach out on Twitter at [@tina_cms](https://twitter.com/tina_cms).\n\n## Development tips\n\n### Visual Studio Code GraphQL extension\n\n[Install the GraphQL extension](https://marketplace.visualstudio.com/items?itemName=GraphQL.vscode-graphql) to benefit from type auto-completion.\n\n### Typescript\n\nA good way to ensure your components match the shape of your data is to leverage the auto-generated TypeScript types.\nThese are rebuilt when your `.tina` config changes.\n\n## LICENSE\n\nLicensed under the [Apache 2.0 license](./LICENSE).\n","languages":["TypeScript","JavaScript","Shell","CSS"]},{"name":"ahaasler.github.io","description":"My webpage","url":"https://github.com/ahaasler/ahaasler.github.io","readme":null,"languages":["TypeScript","CSS","JavaScript"]},{"name":"dotfiles","description":"My dotfiles","url":"https://github.com/ahaasler/dotfiles","readme":"# dotfiles\nMy dotfiles\n\n## Installation\n\nExecute this command on a terminal:\n\n```\nbash <(curl -skL haa.li/getdotfiles)\n```\n\nRestart terminals or reboot computer.\n\n## License\n\nThis project is released under the [MIT License](http://opensource.org/licenses/MIT \"The MIT License\").\n\nSee [LICENSE](LICENSE \"The MIT License\").\n\n","languages":["Shell","CSS","Vim Script","Python","Perl"]},{"name":"yutil","description":"Common functionality for working with YAML files","url":"https://github.com/amplia-iiot/yutil","readme":"# yutil\n\n[![Latest Release](https://img.shields.io/github/release/amplia-iiot/yutil.svg)](https://github.com/amplia-iiot/yutil/releases/latest)\n[![Test Status](https://github.com/amplia-iiot/yutil/workflows/Test/badge.svg)](https://github.com/amplia-iiot/yutil/actions/workflows/test.yml)\n[![Lint Status](https://github.com/amplia-iiot/yutil/workflows/Lint/badge.svg)](https://github.com/amplia-iiot/yutil/actions/workflows/lint.yml)\n[![Codecov report](https://img.shields.io/codecov/c/github/amplia-iiot/yutil/main.svg)](https://codecov.io/gh/amplia-iiot/yutil)\n[![Conventional Commits](https://img.shields.io/badge/Conventional%20Commits-1.0.0-yellow.svg)](https://www.conventionalcommits.org/en/v1.0.0/)\n[![MIT License](https://img.shields.io/badge/license-MIT-blue.svg)](https://github.com/amplia-iiot/yutil/blob/main/LICENSE)\n\nCommon functionality for working with YAML files\n\n## Table of contents\n\n- [yutil](#yutil)\n\t- [Table of contents](#table-of-contents)\n\t- [Features](#features)\n\t- [Getting started](#getting-started)\n\t\t- [Installation](#installation)\n\t\t\t- [deb/rpm/apk:](#debrpmapk)\n\t\t\t- [Manual](#manual)\n\t\t\t- [Go users](#go-users)\n\t\t- [Test installation](#test-installation)\n\t\t- [Quick Start](#quick-start)\n\t\t\t- [Format](#format)\n\t\t\t- [Merge](#merge)\n\t\t\t- [External configuration](#external-configuration)\n\t- [Development](#development)\n\t- [Release Process](#release-process)\n\t- [CHANGELOG](#changelog)\n\t- [License](#license)\n\n## Features\n\n- [Merge](#merge) files\n\n## Getting started\n\n### Installation\n\nInstall `yutil` with your preferred method:\n\n#### deb/rpm/apk:\n\nDownload the .deb, .rpm or .apk from the [latest release] and install them with the appropriate tools.\n\n#### Manual\n\nDownload the `.tar.gz` from the [latest release] and add the binary to your path.\n\n#### Go users\n\n```bash\ngo install github.com/amplia-iiot/yutil@latest\n```\n\n### Test installation\n\n```bash\nyutil version\n```\n\n### Quick Start\n\n```bash\nyutil help\n```\n\n#### Format\n\nThis outputs a formatted _YAML_ file or files. That includes sorting its nodes alphabetically and cleaning the format of the values:\n- _Strings_ that do not need quotes to remain a primitive string lose the quotes. When quotes are needed, **single quotes** are preferred for strings with special characters. For strings containing a _number_, _boolean_ or _null_ values, **double quotes** are used. Unicode escape sequences in a string are replaced with the character.\n- The proper formatting for _null_ is `null`, not `Null`. The same happens to _boolean_ values, **lowercase** is used when formatting.\n- _Arrays_ maintain the order of elements, and each element appears on a new line.\n- Comments are removed.\n\n> Check the [tests](./pkg/format/content_test.go) for examples.\n\nTo see and format the content of a _YAML_ file use:\n\n```bash\nyutil format file.yml\n```\n\nUse `-o` (`--output`) option if you want to output to a file instead of _stdout_.\n\n```bash\nyutil format file.yml -o file.formatted.yml\n```\n\nBy default `yutil` uses _stdin_ as _YAML_ content if available:\n\n```bash\ncat file.yml | yutil format > file.formatted.yml\n```\n\nYou may ignore this input (`--no-input`) if you can't control what's piped to `yutil`:\n\n```bash\necho \"this is not a yaml\" | yutil --no-input format file.yml > file.formatted.yml\n```\n\nIf you want to format a _YAML_ file and store the result in the same file use in-place formatting with `-i` (`--in-place`). You may pass as many _YAML_ files as desired:\n\n```bash\nyutil -i file.yml\nyutil -i file1.yml file2.yml file3.yml\n```\n\nUse `-s` (`--suffix`) to make a backup before formatting the file/s:\n\n```bash\nyutil -s .bak file1.yml file2.yml file3.yml\n```\n\nThis will make a copy the files (`file1.yml.bak`, `file2.yml.bak` and `file3.yml.bak`) and save the formatted _YAML_ in the original files.\n\n> When using `-s`, in-place formatting is implicit and there's no need to also use `-i`.\n\nIn-place formatting does not allow for _stdin_ to be used as input, if something is piped to `yutil` an error will be displayed. Use `--no-input` to ignore _stdin_ input.\n\n#### Merge\n\nThis outputs a formatted (ordered and cleaned) _YAML_ file resulting of merging the passed yaml files (or content).\n\nThe files are merged in ascending level of importance in the hierarchy. A yaml node in the last file replaces values in\nany previous file. You may pass as many _YAML_ files as desired:\n\n```bash\nyutil merge base.yml changes.yml\nyutil merge base.yml changes.yml important.yml\n```\n\nUse `-o` (`--output`) option if you want to output to a file instead of _stdout_.\n\n```bash\nyutil merge base.yml changes.yml -o merged.yml\n```\n\nBy default `yutil` uses _stdin_ as the first _YAML_ content:\n\n```bash\ncat base.yml | yutil merge changes.yml > merged.yml\n```\n\nYou may ignore this input (`--no-input`) if you can't control what's piped to `yutil`:\n\n```bash\necho \"this is not a yaml\" | yutil --no-input merge base.yml changes.yml\n```\n\n#### External configuration\n\nYou may want to always use the same config without writting the flags, `yutil` reads a _YAML_ file to configure itself from the current folder or the user home dir in these order of precedence:\n- `.yutil.yaml` in current folder\n- `.yutil.yml` in current folder\n- `.yutil` in current folder\n- `.yutil.yaml` in user home dir\n- `.yutil.yml` in user home dir\n- `.yutil` in user home dir\n\nSample configuration file:\n\n```yaml\n# Disable stdin\nno-input: true\n# Merge specific config\nmerge:\n  # Merge output file\n  output: /tmp/merged.yml\n```\n\nYou may pass as argument the desired config file:\n\n```bash\n# Including extension to support multiple config types\n./yutil version --config config.properties\n```\n\n> Supported formats: JSON, TOML, YAML, HCL, envfile and Java properties config files\n\n## Development\n\n1. Use Golang version `>= 1.16`\n2. Fork (https://github.com/amplia-iiot/yutil)\n3. Run `make set-up` to install dev tools\n4. Create a feature branch\n5. Check changes (test & lint) with `make check`\n6. Commit your changes following [Conventional Commits]\n7. Rebase your local changes against the upstream _main_ branch\n8. Create a Pull Request\n\nYou are welcome to report bugs or add feature requests and comments in [issues].\n\n## Release Process\n\n`make version` contains the steps to generate a new version. It uses `svu` to calculate the next version number based on the _git log_ and generates the [CHANGELOG.md] with `git-chglog`\n\nPush the generated _tag_ and the _release_ workflow will generate the release.\n\nOr you can trigger a manual run of the [_release_ workflow](https://github.com/amplia-iiot/yutil/actions/workflows/release.yml) with _preview_ set to `false` to generate the commit and tag automatically.\n\n## CHANGELOG\n\nSee [CHANGELOG.md]\n\n## License\n\n[MIT Â© amplia-iiot](./LICENSE)\n\n[latest release]: https://github.com/amplia-iiot/yutil/releases/latest\n[Conventional Commits]: https://www.conventionalcommits.org/en/v1.0.0/\n[issues]: https://github.com/amplia-iiot/yutil/issues\n[CHANGELOG.md]: ./CHANGELOG.md\n","languages":["Go","Makefile","Shell"]},{"name":"asdf-godot","description":"Godot plugin for asdf version manager","url":"https://github.com/ahaasler/asdf-godot","readme":"# asdf-godot\nGodot plugin for asdf version manager\n","languages":[]},{"name":"tailwindcss-material","description":"Material plugin for tailwindcss","url":"https://github.com/ahaasler/tailwindcss-material","readme":"# tailwindcss-material\n\nMaterial plugin for tailwindcss 2.0.0 and up.\n\n## Install plugin\n\nInstall the plugin as devDependency (or normal dependency if needed):\n\n```bash\n# Using npm\nnpm install --save-dev tailwindcss-material\n\n# Using yarn\nyarn add --dev tailwindcss-material\n```\n\nIf you want to use the complete plugin:\n\n```javascript\n// tailwind.config.js\nmodule.exports = {\n  plugins: [\n    require(\"tailwindcss-material\")\n  ]\n}\n```\n\n## Colors\n\n> Obtained from [Material.io](https://material.io/design/color/the-color-system.html#tools-for-picking-colors).\n\n### Curate colors\n\nIf you don't want the complete material color palette available to you import `\"tailwindcss-material/colors\"` and choose the ones you prefer:\n\n```javascript\n// tailwind.config.js\nconst colors = require(\"tailwindcss-material/colors\")\n\nmodule.exports = {\n  theme: {\n    colors: {\n      // Specify your palette\n      gray: colors.blueGray,\n      red: colors.red,\n      blue: colors.lightBlue,\n      yellow: colors.amber\n    }\n  }\n}\n```\n\n### Replace tailwind default color\n\nIf you'd like to use a material color without losing the remaining default tailwind colors you can replace a specific tailwind color with a material one:\n\n```javascript\n// tailwind.config.js\nconst colors = require(\"tailwindcss-material/colors\")\n\nmodule.exports = {\n  theme: {\n    extend: {\n      colors: {\n        // Replace gray color\n        gray: colors.gray\n      }\n    }\n  }\n}\n```\n\nTo add a color without replacing any tailwind color, prefix it with `\"material\"` or use an unused color name:\n\n```javascript\n// tailwind.config.js\nconst colors = require(\"tailwindcss-material/colors\")\n\nmodule.exports = {\n  theme: {\n    extend: {\n      colors: {\n        // Add material gray color\n        materialGray: colors.gray\n      }\n    }\n  }\n}\n```\n\nYou may also replace a specific shade without affecting the rest of the palette:\n\n```javascript\n// tailwind.config.js\nconst colors = require(\"tailwindcss-material/colors\")\n\nmodule.exports = {\n  theme: {\n    extend: {\n      colors: {\n        // Replace gray-500 color shade\n        blue: {\n          500: colors.blue.500\n        }\n      }\n    }\n  }\n}\n```\n","languages":["JavaScript","Shell"]},{"name":"nextjs-docs","description":null,"url":"https://github.com/ahaasler/nextjs-docs","readme":null,"languages":[]},{"name":"docker-jira","description":"A Docker image for Jira Core.","url":"https://github.com/ahaasler/docker-jira","readme":null,"languages":["Shell","Dockerfile"]}]},"__N_SSG":true}